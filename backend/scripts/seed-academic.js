const mongoose = require('mongoose');
const dotenv = require('dotenv');
const Course = require('../src/models/Course');
const Class = require('../src/models/Class');
const User = require('../src/models/User');

// Load env vars
dotenv.config();

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGODB_URI);
    console.log(`MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error('Database connection error:', error.message);
    process.exit(1);
  }
};

const seedAcademicData = async () => {
  try {
    await connectDB();

    // X√≥a d·ªØ li·ªáu c≈©
    console.log('Cleaning old data...');
    await Class.deleteMany({});
    await Course.deleteMany({});

    // T√¨m ho·∫∑c t·∫°o teacher
    let teacher = await User.findOne({ role: 'teacher' });
    if (!teacher) {
      teacher = await User.create({
        name: 'Gi·∫£ng vi√™n Nguy·ªÖn VƒÉn A',
        email: 'teacher@exam.local',
        password: 'password123',
        role: 'teacher',
        isActive: true
      });
      console.log('Created teacher account');
    }

    // T·∫°o c√°c kh√≥a h·ªçc m·∫´u
    console.log('Creating sample courses...');
    
    const coursesData = [
      // NƒÉm h·ªçc 2024-2025, H·ªçc k·ª≥ 1
      {
        name: 'L·∫≠p tr√¨nh Web',
        code: 'IT4409',
        description: 'H·ªçc l·∫≠p tr√¨nh web v·ªõi HTML, CSS, JavaScript, v√† c√°c framework hi·ªán ƒë·∫°i',
        academicYear: '2024-2025',
        semester: 'HK1',
        credits: 3,
        teacher: teacher._id,
        status: 'active'
      },
      {
        name: 'C∆° s·ªü d·ªØ li·ªáu',
        code: 'IT4408',
        description: 'Thi·∫øt k·∫ø v√† qu·∫£n l√Ω c∆° s·ªü d·ªØ li·ªáu',
        academicYear: '2024-2025',
        semester: 'HK1',
        credits: 3,
        teacher: teacher._id,
        status: 'active'
      },
      {
        name: 'M·∫°ng m√°y t√≠nh',
        code: 'IT4407',
        description: 'T√¨m hi·ªÉu v·ªÅ m·∫°ng m√°y t√≠nh v√† giao th·ª©c m·∫°ng',
        academicYear: '2024-2025',
        semester: 'HK1',
        credits: 3,
        teacher: teacher._id,
        status: 'active'
      },
      
      // NƒÉm h·ªçc 2024-2025, H·ªçc k·ª≥ 2
      {
        name: 'Tr√≠ tu·ªá nh√¢n t·∫°o',
        code: 'IT4406',
        description: 'Gi·ªõi thi·ªáu v·ªÅ AI v√† machine learning',
        academicYear: '2024-2025',
        semester: 'HK2',
        credits: 4,
        teacher: teacher._id,
        status: 'active'
      },
      {
        name: 'C√¥ng ngh·ªá ph·∫ßn m·ªÅm',
        code: 'IT4405',
        description: 'Ph∆∞∆°ng ph√°p ph√°t tri·ªÉn ph·∫ßn m·ªÅm',
        academicYear: '2024-2025',
        semester: 'HK2',
        credits: 3,
        teacher: teacher._id,
        status: 'active'
      },
      
      // NƒÉm h·ªçc 2024-2025, H·ªçc k·ª≥ h√®
      {
        name: 'Th·ª±c t·∫≠p doanh nghi·ªáp',
        code: 'IT4490',
        description: 'Th·ª±c t·∫≠p t·∫°i c√°c doanh nghi·ªáp c√¥ng ngh·ªá',
        academicYear: '2024-2025',
        semester: 'HK_HE',
        credits: 2,
        teacher: teacher._id,
        status: 'active'
      },
      
      // NƒÉm h·ªçc 2025-2026, H·ªçc k·ª≥ 1
      {
        name: 'H·ªçc m√°y n√¢ng cao',
        code: 'IT5409',
        description: 'C√°c thu·∫≠t to√°n h·ªçc m√°y n√¢ng cao',
        academicYear: '2025-2026',
        semester: 'HK1',
        credits: 4,
        teacher: teacher._id,
        status: 'draft'
      }
    ];

    const courses = await Course.insertMany(coursesData);
    console.log(`Created ${courses.length} courses`);

    // T·∫°o c√°c l·ªõp h·ªçc cho t·ª´ng kh√≥a h·ªçc
    console.log('Creating sample classes...');
    
    const classesData = [];
    
    for (const course of courses) {
      // M·ªói kh√≥a h·ªçc c√≥ 2-3 l·ªõp
      const numClasses = Math.floor(Math.random() * 2) + 2; // 2-3 l·ªõp
      
      for (let i = 1; i <= numClasses; i++) {
        const dayOfWeek = Math.floor(Math.random() * 5) + 1; // Th·ª© 2-6
        const startHour = Math.floor(Math.random() * 6) + 7; // 7-12h
        
        classesData.push({
          name: `${course.name} - L·ªõp ${i}`,
          code: `${course.code}_L${String(i).padStart(2, '0')}`,
          course: course._id,
          teacher: teacher._id,
          schedule: {
            dayOfWeek: dayOfWeek,
            startTime: `${String(startHour).padStart(2, '0')}:00`,
            endTime: `${String(startHour + 2).padStart(2, '0')}:00`,
            room: `P${100 + Math.floor(Math.random() * 20)}`
          },
          maxStudents: 30 + Math.floor(Math.random() * 20), // 30-49 sinh vi√™n
          status: course.status === 'active' ? 'active' : 'draft'
        });
      }
    }

    const classes = await Class.insertMany(classesData);
    console.log(`Created ${classes.length} classes`);

    console.log('\n‚úÖ Seed data created successfully!');
    console.log('\nüìã Summary:');
    console.log(`- Courses: ${courses.length}`);
    console.log(`- Classes: ${classes.length}`);
    console.log(`- Teacher: ${teacher.email}`);
    
    console.log('\nüóì Academic Years & Semesters:');
    const academicYears = [...new Set(courses.map(c => c.academicYear))];
    for (const year of academicYears) {
      const yearCourses = courses.filter(c => c.academicYear === year);
      const semesters = [...new Set(yearCourses.map(c => c.semester))];
      console.log(`  ${year}: ${semesters.join(', ')}`);
    }

    process.exit(0);
  } catch (error) {
    console.error('Error seeding data:', error);
    process.exit(1);
  }
};

seedAcademicData();
